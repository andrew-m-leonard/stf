<?xml version="1.0"?>

<!--
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="stf.top">

	<!-- Set a property for accessing environment variables.  -->
	<property environment="env"/>

	<!-- Set default prereqs_root.  -->
	<!-- If source has been checked out to /home/user/git/stf, default location for prereqs is /home/user/systemtest_prereqs.  -->
	<property name="prereqs_root" location="${source_root}/../../systemtest_prereqs"/>

	<!-- Platform dependent settings.  -->
	<condition property="exe_suffix" value=".exe" else="" >
	   <os family="windows" />
    </condition>
	<condition property="is_windows" value="true" else="false" >
		<os family="windows" />
	</condition>
	<condition property="isOpenJ9" value="true" else="false" >
		<contains string="${java_java_vm_vendor}" substring="J9"/>
	</condition>

	<!--
		Determine the java version being used for the build and set properties for use by build.xml files.
		If the user did not set the property java_home, use the ant java.home property.
		On IBM zOS java and Java 9, the ant property java.home points at JAVA_HOME.
		On pre Java 9 non IBM zOS java, the ant property java.home points at JAVA_HOME/jre.
	-->
	<target name="setup-java-properties" unless="setup_java_properties_run">
		<property name="setup_java_properties_run" value="true"/>
		<echo message="java_home is ${java_home}"/>
		<echo message="java.home is ${java.home}"/>
		<condition property="java_home" value="${java.home}">
			<not>
				<available file="${java_home}"/>
			</not>
		</condition>
		<set-platform-properties platform.property="java_platform"
								 platformclass.property="java_platformclass"
								 java.bindir.property="java_bindir"
								 java.compiler.property="java_compiler"
								 osname.property="java_osname"
								 arch.property="java_arch"
								 bits.property="java_bits"
								 java.specification.version.property="java_java_specification_version"
								 java.vm.vendor.property="java_java_vm_vendor"
								 java.home="${java_home}"
								 java.id="buildjdk"/>
		<!-- Uncomment for debugging.  -->
		<!-- <echo message="java_platformclass set to ${java_platformclass}"/> -->
		<!-- <echo message="java_osname set to ${java_osname}"/> -->
		<!-- <echo message="java_arch set to ${java_arch}"/> -->
		<!-- <echo message="java_bits set to ${java_bits}"/> -->
		<echo message="java_platform set to ${java_platform}"/>
		<echo message="java_java_specification_version set to ${java_java_specification_version}"/>
		<echo message="java_java_vm_vendor set to ${java_java_vm_vendor}"/>
		<echo message="java_bindir set to ${java_bindir}"/>
		<property name="java_compiler" location="${java_bindir}/javac${exe_suffix}"/>
		<echo message="java_compiler set to ${java_compiler}"/>
	</target>

	<!-- Setup properties to allow projects to use a copy of Visual Studio for compiling native test cases.  -->
	<!-- Look for either version 10.0 or 14.0 in the default installation location.  -->
	<!-- To use a different location property rtb.vcvarsall_filename needs to be set on the command line for the build.  -->
	<!-- The vcvarsall.bat file argument amd64 is added if the javac being used to compile the java classes is a 64 bit java. -->

	<target name="setup-windows-compiler" unless="setup_windows_compiler_run">
		<property name="setup_windows-compiler_run" value="true"/>
		<property name="vs14_vcvarsall_filename" location="c:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"/>
		<available file="${vs14_vcvarsall_filename}" property="vs14_available"/>
		<property name="vs10_vcvarsall_filename" location="c:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\vcvarsall.bat"/>
		<available file="${vs10_vcvarsall_filename}" property="vs10_available"/>
		<condition property="vcvarsall_filename" value="${vs14_vcvarsall_filename}">
			<isset property="vs14_available"/>
		</condition>
		<condition property="vcvarsall_filename" value="${vs10_vcvarsall_filename}">
			<isset property="vs10_available"/>
		</condition>
		<condition property="windows_native_compiler_present" value="true">
			<isset property="vcvarsall_filename"/>
			</condition>
		<condition property="vcvarsall_bits_arg" value="amd64" else="">
			<equals arg1="${java_bits}" arg2="64" trim="true"/>
		</condition>
		<condition property="setup_windows_build_env" value='call "${vcvarsall_filename}" ${vcvarsall_bits_arg} &amp;&amp;' else="">
			<equals arg1="${is_windows}" arg2="true"/>
		</condition>
	</target>

	<!-- Set up classpaths for prereqs. -->
	<path id="junit.class.path">
		<pathelement location="${prereqs_root}/junit-4.12/junit-4.12.jar"/>
		<pathelement location="${prereqs_root}/junit-4.12/hamcrest-core-1.3.jar"/>
	</path>
	<path id="log4j-2.3.class.path">
		<pathelement location="${prereqs_root}/log4j-2.3/log4j-api-2.3.jar"/>
		<pathelement location="${prereqs_root}/log4j-2.3/log4j-core-2.3.jar"/>
	</path>
	<path id="tools.class.path">
		<pathelement location="${prereqs_root}/tools/tools.jar"/>
	</path>
	<path id="asm.7.1.class.path">
		<pathelement location="${prereqs_root}/asm-7.1/asm-7.1.jar"/>
	</path>
	<path id="stf.class.path">
		<pathelement location="${stf_root}/stf.core/bin/stf.core.jar"/>
		<pathelement location="${stf_root}/stf.load/bin/stf.load.jar"/>
	</path>
	<path id="project.class.path">
		<path refid="junit.class.path" />
		<path refid="log4j-2.3.class.path" />
	</path>

	<!--
		Target to check for prereqs.
		Same as configure target except prereqs are not installed if missing.
	-->
	<target name="check-prereqs" depends="setup-java-properties, setup-windows-compiler" unless="check_prereqs_run">
		<ant target="run-check-prereqs" inheritAll="true"/>
		<property name="check_prereqs_run" value="true"/>
	</target>
	<target name="run-check-prereqs" depends="check-for-ant-1.10.2, print-ant-1.10.2-location, print-ant-1.10.2-error,
										  check-for-junit-4.12, print-junit-4.12-location, print-junit-4.12-error,
										  check-for-hamcrest-core-1.3, print-hamcrest-core-1.3-location, print-hamcrest-core-1.3-error,
										  check-for-log4j-2.3, print-log4j-2.3-location, print-log4j-2.3-error,
										  check-for-asm-7.1, print-asm-7.1-location, print-asm-7.1-error,
										  check-for-tools-jar, print-tools-jar-location, print-tools-jar-error,
										  check-for-windows-sysinternals, print-windows-sysinternals-location, print-windows-sysinternals-error,
										  fail-if-error">
	</target>

	<!--
		Targets to check for and download prereqs.
		All prereqs are installed under the same ${prereqs_root} directory.
	-->
	<target name="configure" depends="check-for-download-tool,
									  check-for-ant-1.10.2, configure-ant-1.10.2, print-ant-1.10.2-location, print-ant-1.10.2-error,
									  check-for-junit-4.12, configure-junit-4.12, print-junit-4.12-location, print-junit-4.12-error,
									  check-for-hamcrest-core-1.3, configure-hamcrest-core-1.3, print-hamcrest-core-1.3-location, print-hamcrest-core-1.3-error,
									  check-for-log4j-2.3, configure-log4j-2.3, print-log4j-2.3-location, print-log4j-2.3-error,
									  check-for-asm-7.1, configure-asm-7.1, print-asm-7.1-location, print-asm-7.1-error,
									  check-for-tools-jar, configure-tools-jar, print-tools-jar-location, print-tools-jar-error,
									  check-for-windows-sysinternals, set-download-windows-sysinternals-required, configure-windows-sysinternals, print-windows-sysinternals-location, print-windows-sysinternals-error,
									  fail-if-error">
	</target>

	<!-- Target to check if ant 1.10.2 is available. -->
	<!-- At the time of writing, the default apt-get ant version on Ubuntu is 1.9.6. -->
	<!-- Building Java 9 applications requires 1.10.2. -->
	<target name="check-for-ant-1.10.2">
		<property name="ant_1.10.2_dir" location="${prereqs_root}/apache-ant-1.10.2"/>
		<property name="ant_1.10.2_file" value="lib/ant-launcher.jar"/>
		<property name="ant_1.10.2" location="${ant_1.10.2_dir}/${ant_1.10.2_file}"/>
	    <available file="${ant_1.10.2}" property="ant_1.10.2_available"/>
	</target>

	<!--
		Target to get ant 1.10.2 from http://archive.apache.org/dist/ant/binaries/apache-ant-1.10.2-bin.zip
		Unzip to PREREQS_ROOT/ant-1.10.2
	-->
	<target name="configure-ant-1.10.2" unless="ant_1.10.2_available">
		<download-file destdir="${java.io.tmpdir}/apache-ant-1.10.2" destfile="apache-ant-1.10.2-bin.zip" srcurl="http://archive.apache.org/dist/ant/binaries/apache-ant-1.10.2-bin.zip"/>
		<!-- The ant 1.10.2 zip file includes a top level apache-ant-1.10.2 directory. -->
		<unzip src="${java.io.tmpdir}/apache-ant-1.10.2/apache-ant-1.10.2-bin.zip" dest="${prereqs_root}"/>
		<delete dir="${java.io.tmpdir}/apache-ant-1.10.2"/>
	    <available file="${ant_1.10.2}" property="ant_1.10.2_available"/>
	</target>

	<!-- Target to check if junit 4.12 is available. -->
	<target name="check-for-junit-4.12" unless="check_prereqs_run">
		<property name="junit_4.12_dir" location="${prereqs_root}/junit-4.12"/>
		<property name="junit_4.12_file" value="junit-4.12.jar"/>
		<property name="junit_4.12" location="${junit_4.12_dir}/${junit_4.12_file}"/>
		<available file="${junit_4.12}" property="junit_4.12_available"/>
	</target>

	<!--
		Target to get junit from https://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar
		Copy to ${prereqs_root}/junit-4.12/junit-4.12.jar
	-->
	<target name="configure-junit-4.12" unless="junit_4.12_available">
		<download-file destdir="${prereqs_root}/junit-4.12" destfile="junit-4.12.jar" srcurl="https://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar"/>
		<available file="${junit_4.12}" property="junit_4.12_available"/>
	</target>

	<!-- Target to check if hamcrest core 1.3 (required by junit) is available. -->
	<target name="check-for-hamcrest-core-1.3" unless="check_prereqs_run">
		<property name="hamcrest_core_1.3_dir" location="${prereqs_root}/junit-4.12"/>
		<property name="hamcrest_core_1.3_file" value="hamcrest-core-1.3.jar"/>
		<property name="hamcrest_core_1.3" location="${hamcrest_core_1.3_dir}/${hamcrest_core_1.3_file}"/>
		<available file="${hamcrest_core_1.3}" property="hamcrest_core_1.3_available"/>
	</target>

	<!--
		Target to get hamcrest core from https://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
		Copy to PREREQS_ROOT/junit-4.12/hamcrest-core-1.3.jar
	-->
	<target name="configure-hamcrest-core-1.3" unless="hamcrest_core_1.3_available">
		<download-file destdir="${prereqs_root}/junit-4.12" destfile="hamcrest-core-1.3.jar" srcurl="https://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
		<available file="${hamcrest_core_1.3}" property="hamcrest_core_1.3_available"/>
	</target>

	<!-- Target to check if log4j 2.3 is available. -->
	<target name="check-for-log4j-2.3" unless="check_prereqs_run">
		<property name="log4j_2.3_dir" location="${prereqs_root}/log4j-2.3"/>
		<property name="log4j_api_2.3_file" value="log4j-api-2.3.jar"/>
		<property name="log4j_core_2.3_file" value="log4j-core-2.3.jar"/>
		<property name="log4j_api_2.3" location="${log4j_2.3_dir}/${log4j_api_2.3_file}"/>
		<property name="log4j_core_2.3" location="${log4j_2.3_dir}/${log4j_core_2.3_file}"/>
		<condition property="log4j_2.3_available">
			<and>
				<available file="${log4j_api_2.3}"/>
				<available file="${log4j_core_2.3}"/>
			</and>
		</condition>
	</target>

	<!--
		Target to get log4j 2.3 from https://archive.apache.org/dist/logging/log4j/2.3/apache-log4j-2.3-bin.zip
		Copy to PREREQS_ROOT/log4j-2.3/log4j-api-2.3.jar and PREREQS_ROOT/log4j-2.3/log4j-core-2.3.jar
	-->
	<target name="configure-log4j-2.3" unless="log4j_2.3_available">
		<download-file destdir="${java.io.tmpdir}/log4j-2.3" destfile="apache-log4j-2.3-bin.zip" srcurl="https://archive.apache.org/dist/logging/log4j/2.3/apache-log4j-2.3-bin.zip"/>
		<unzip src="${java.io.tmpdir}/log4j-2.3/apache-log4j-2.3-bin.zip" dest="${java.io.tmpdir}/log4j-2.3"/>
		<copy file="${java.io.tmpdir}/log4j-2.3/apache-log4j-2.3-bin/log4j-api-2.3.jar" tofile="${log4j_api_2.3}"/>
		<copy file="${java.io.tmpdir}/log4j-2.3/apache-log4j-2.3-bin/log4j-core-2.3.jar" tofile="${log4j_core_2.3}"/>
		<delete dir="${java.io.tmpdir}/log4j-2.3"/>
		<condition property="log4j_2.3_available">
			<and>
				<available file="${log4j_api_2.3}"/>
				<available file="${log4j_core_2.3}"/>
			</and>
		</condition>
	</target>
	<!--
		If we're running on Windows, check if the windows sysinternals tools are available.
	 	The Windows Sysinternals tools are used to collect dumps and kill hung processes.
	-->
	<target name="check-for-windows-sysinternals" unless="check_prereqs_run">
		<property name="windows_sysinternals_dir" location="${prereqs_root}/windows_sysinternals"/>
		<!-- We're just using the existence of pskill.exe to determine whether the tools are installed. -->
	    <available file="${windows_sysinternals_dir}/pskill.exe" property="windows_sysinternals_available"/>
	</target>

	<target name="set-download-windows-sysinternals-required">
		<condition property="download_windows_sysinternals_required">
			<and>
				<os family="windows" />
				<not>
					<isset property="windows_sysinternals_available"/>
				</not>
			</and>
	    </condition>
	</target>
	<!--
		Get the windows sysinternals tools from https://download.sysinternals.com/files/SysinternalsSuite.zip
		Unzip to PREREQS_ROOT/windows_sysinternals
	-->
	<target name="configure-windows-sysinternals" if="download_windows_sysinternals_required">
		<download-file destdir="${java.io.tmpdir}/windows_sysinternals" destfile="SysinternalsSuite.zip" srcurl="https://download.sysinternals.com/files/SysinternalsSuite.zip"/>
		<unzip src="${java.io.tmpdir}/windows_sysinternals/SysinternalsSuite.zip" dest="${windows_sysinternals_dir}"/>
		<delete dir="${java.io.tmpdir}/windows_sysinternals"/>
		<!-- We're just using the existence of pskill.exe to determine whether the tools are installed. -->
	    <available file="${windows_sysinternals_dir}/pskill.exe" property="windows_sysinternals_available"/>
	</target>
	<!-- 
		Target to check if there is a tools.jar already copied to PREREQS_ROOT/tools.
		If we already have a tools.jar, or we are using Java >8, then tools.jar is correct.
		If we do not have a tools.jar, and we are using Java 8, then tools.jar is not correct.
		Note: In Java 9 the classes we need from tools.jar were folded into the Class Library, 
		so we don't need the jar, and this is correct.
	-->
	<target name="check-for-tools-jar">
		<property name="tools_jar_dir" location="${prereqs_root}/tools"/>
		<property name="tools_jar_file" value="tools.jar"/>
		<echo message="java.specification.version is ${java.specification.version}"/>
		<condition property="tools_jar_correct">
			<or>
				<not>
					<equals arg1="${java.specification.version}" arg2="1.8"/>
				</not>
				<and>
					<equals arg1="${java.specification.version}" arg2="1.8"/>
					<available file="${tools_jar_dir}/${tools_jar_file}"/>
				</and>
			</or>
		</condition>
	    <available file="${tools_jar_dir}/${tools_jar_file}" property="tools_jar" value="${tools_jar_dir}/${tools_jar_file}"/>
	</target>

	<!--
		Some tests may require test.debugging requires tools.jar for building (e.g. test.debugging in openjdk-systemtests).
		tools.jar is shipped with java8, but is built into the jdk in later releases (so does not exist).
		The code below looks for tools.jar in Java 8, but only if we are using java 8.
		If tools.jar is found, it is copied to PREREQS_ROOT/tools.
		The file is not automatically refreshed once it exists in PREREQS_ROOT/tools.
	-->

	<target name="configure-tools-jar" depends="setup-java-properties" unless="${tools_jar_correct}">
		<property name="tools_jar_origin" value="${java_bindir}/../lib/tools.jar"/>
		<echo message="configure-tools-jar: Copying ${tools_jar_origin} to ${tools_jar_dir}"/>
		<copy file="${tools_jar_origin}" todir="${tools_jar_dir}"/>
		<property name="tools_jar" value="${tools_jar_dir}/${tools_jar_file}"/>
		<available file="${tools_jar_dir}/${tools_jar_file}" property="tools_jar_correct"/>
	</target>

	<!-- Target to check if there is an asm-7.1.jar already copied to PREREQS_ROOT/asm-7.1 -->
	<target name="check-for-asm-7.1">
		<property name="asm_7.1_dir" location="${prereqs_root}/asm-7.1"/>
		<property name="asm_7.1_file" value="asm-7.1.jar"/>
		<property name="asm_7.1" value="${asm_7.1_dir}/${asm_7.1_file}"/>
		<available file="${asm_7.1_dir}/${asm_7.1_file}" property="asm_7.1_available"/>
	</target>

	<target name="configure-asm-7.1" unless="asm_7.1_available">
		<!-- Fetch asm from https://repository.ow2.org/etc. -->
		<delete dir="${prereqs_root}/asm-7.1" failonerror="false"/>
		<download-file destdir="${asm_7.1_dir}" destfile="${asm_7.1_file}" srcurl="https://repository.ow2.org/nexus/content/repositories/releases/org/ow2/asm/asm/7.1/asm-7.1.jar"/>
		<property name="asm_7.1" value="${asm_7.1_dir}/${asm_7.1_file}"/>
		<available file="${asm_7.1}" property="asm_7.1_available"/>
	</target>

	<target name="check-for-download-tool" depends="check-for-wget, check-for-curl">
		<condition property="downloadtool_available" value="true">
			<or>
				<isset property="wget_available"/>
				<isset property="curl_available"/>
			</or>
		</condition>
	</target>
	
	<!-- Target to check if wget is available. -->
	<target name="check-for-wget" unless="isZOS">
		<!-- wget will be used to download files. -->
		<!-- If it cannot be found on the PATH then the build will fail when the download-file macro (in macrodefs.xml) is invoked. -->
		<echo message="Looking for wget on PATH"/>
		<available file="wget" filepath="${env.PATH}" property="wget_available"/>
		<available file="wget.exe" filepath="${env.PATH}" property="wget_available"/>
		<!-- On Windows PATH environment variable may be Path -->
		<available file="wget.exe" filepath="${env.Path}" property="wget_available"/>
	</target>

	<!-- Target to check if curl is available. -->
	<target name="check-for-curl" if="isZOS">
		<!-- curl will be used to download files. -->
		<!-- If it cannot be found on the PATH then the build will fail when the download-file macro (in macrodefs.xml) is invoked. -->
		<echo message="Looking for curl on PATH"/>
		<available file="curl" filepath="${env.PATH}" property="curl_available"/>
	</target>
	
	<condition property="isZOS" value="true">
			<equals arg1="${os.name}" arg2="z/OS"/>
	</condition>
		
	<condition property="src-encoding" value="IBM-1047" else="UTF-8">
		<isset property="isZOS"/>
	</condition>

	<condition property="download-tool" value="curl" else="wget">
		<isset property="isZOS"/>
	</condition>
	
	<condition property="download-tool-security-options" value="-k" else="--no-check-certificate">
		<isset property="isZOS"/>
	</condition>
	
	<condition property="download-tool-srcfile-option" value="-o" else="-O">
		<isset property="isZOS"/>
	</condition>
	
	<condition property="MAKE" value="gmake" else="make">
	    <or>
	        <equals arg1="${os.name}" arg2="AIX"/>
	        <contains string="${os.name}" substring="BSD"/>
	    </or>
	</condition>

	<macrodef name="download-file" description="Use ${download-tool} to download a file">
		<attribute name="srcurl" description="URL of file to download"/>
		<attribute name="destdir" description="Directory in which to place the downloaded file"/>
		<attribute name="destfile" description="File name of the downloaded file"/>
		<sequential>
			<echo message="Executing macro download-file"/>
			<echo message="File to download: @{srcurl}"/>
			<echo message="Destination: @{destdir}/@{destfile}"/>
			<echo message="Download tool: ${download-tool}"/>
			<fail unless="downloadtool_available" message="Cannot find ${download-tool} on PATH, needed to download @{srcurl}. Either install ${download-tool} or add it to PATH and retry.  If you are running the build from the Ant view in Eclipse, add ${download-tool} to your PATH before starting Eclipse."/>
			<mkdir dir="@{destdir}"/>
			<exec executable="${download-tool}">
				<arg value="${download-tool-security-options}"/>
				<arg value="${download-tool-srcfile-option}"/>
				<arg value="@{destdir}/@{destfile}"/>
				<arg value="@{srcurl}"/>
			</exec>
		</sequential>
	</macrodef>
	
	<target name="print-ant-1.10.2-location" if="${ant_1.10.2_available}">
		<echo message="Using ant-1.10.2 from ${ant_1.10.2}"/>
	</target>

	<target name="print-junit-4.12-location" if="junit_4.12_available">
		<echo message="Using junit-4.12 from ${junit_4.12}"/>
	</target>

	<target name="print-hamcrest-core-1.3-location" if="hamcrest_core_1.3_available">
		<echo message="Using hamcrest-core-1.3 from ${hamcrest_core_1.3}"/>
	</target>

	<target name="print-log4j-2.3-location" if="log4j_2.3_available">
		<echo message="Using log4j-api-2.3 from ${log4j_api_2.3} and log4j-core-2.3 from ${log4j_core_2.3}"/>
	</target>

	<target name="print-windows-sysinternals-location" if="windows_sysinternals_available">
		<echo message="Using windows sysinternals from from ${windows_sysinternals_dir}"/>
	</target>

	<target name="print-tools-jar-location" if="tools_jar">
		<echo message="Using tools.jar from ${tools_jar}"/>
	</target>
	
	<target name="print-asm-7.1-location" if="asm_7.1_available">
		<echo message="Using ${asm_7.1_file} from ${asm_7.1}"/>
	</target>

	<target name="print-ant-1.10.2-error" unless="ant_1.10.2_available">
		<echo message="ERROR: Cannot find ant_1.10.2 at ${ant_1.10.2}"/>
		<property name="fail_run" value="true"/>
	</target>

	<target name="print-junit-4.12-error" unless="junit_4.12_available">
		<echo message="ERROR: Cannot find junit-4.12 at ${junit_4.12}"/>
		<property name="fail_run" value="true"/>
	</target>

	<target name="print-hamcrest-core-1.3-error" unless="hamcrest_core_1.3_available">
		<echo message="ERROR: Cannot find hamcrest-core-1.3 at ${hamcrest_core_1.3}"/>
		<property name="fail_run" value="true"/>
	</target>

	<target name="print-log4j-2.3-error" unless="log4j_2.3_available">
		<echo message="ERROR: Cannot find log4j-api-2.3 at ${log4j_api_2.3} and / or log4j-core-2.3 at ${log4j_core_2.3}"/>
		<property name="fail_run" value="true"/>
	</target>
	
	<target name="print-asm-7.1-error" unless="asm_7.1_available">
		<echo message="ERROR: Cannot find ${asm_7.1_file} at ${asm_7.1}"/>
		<property name="fail_run" value="true"/>
	</target>

	<target name="print-tools-jar-error" unless="tools_jar_correct">
		<echo message="ERROR: Cannot find tools.jar at ${tools_jar}"/>
		<property name="fail_run" value="true"/>
	</target>

	<target name="print-windows-sysinternals-error" depends="set-print-windows-sysinternals-error-required,really-print-windows-sysinternals-error">
	</target>

	<target name="set-print-windows-sysinternals-error-required">
		<condition property="print_windows_sysinternals_error_required">
			<and>
				<os family="windows" />
				<not>
					<isset property="windows_sysinternals_available"/>
				</not>
			</and>
	    </condition>
	</target>

	<target name="really-print-windows-sysinternals-error" if="${print_windows_sysinternals_error_required}">
		<echo message="ERROR: Cannot find windows sysinternals at ${windows_sysinternals_dir}"/>
		<property name="fail_run" value="true"/>
	</target>

	<!-- <target name="fail-if-error" if="${fail_run}"> -->
	<target name="fail-if-error" if="fail_run">
		<fail message="Cannot find one or more prereqs.  See the above error messages.  Running 'make configure' or the ant configure target may get all the missing prereqs.  See the appropriate stf.build/docs/build.md or openjdk.build/docs/build.md for more details."/>
	</target>

	<macrodef name="set-platform-properties" description="Sets various properties for the java at the provided java_home location">
		<attribute name="platform.property" description="The property to put the platform name in - e.g. win_x86-64"/>
		<attribute name="platformclass.property" description="The property to put the platform class in - e.g. win_x86, linux_ppcle"/>
		<attribute name="java.bindir.property" description="The property to put the java bin directory in"/>
		<attribute name="java.compiler.property" description="The property to put the java compiler executable in"/>
		<attribute name="osname.property" description="The property to put the osname in e.g. win, linux"/>
		<attribute name="arch.property" description="The property to put the architecture in - e.g. x86, ppcle, 390"/>
		<attribute name="bits.property" description="The property to put the bits in - e.g. 31, 32, 64"/>
		<attribute name="java.specification.version.property" description="The property to put the java version in - e.g. 1.8, 9"/>
		<attribute name="java.vm.vendor.property" description="The JVM version - e.g. Eclipse OpenJ9"/>
		<attribute name="java.home" description="The JAVA_HOME directory of the java to query"/>
		<attribute name="java.id" description="A unique identifier to prefix the properties for the java instance with"/>
		<sequential>
			<available file="@{java.home}/bin/javac${exe_suffix}" property="@{java.bindir.property}" value="@{java.home}/bin"/>
			<available file="@{java.home}/../bin/javac${exe_suffix}"  property="@{java.bindir.property}" value="@{java.home}/../bin"/>
			<property name="@{java.compiler.property}" location="${@{java.bindir.property}}/javac${exe_suffix}"/>
			<tempfile property="properties_file" destDir="${java.io.tmpdir}" prefix="openjdk.java.build.properties."/>
			<!-- Run java -XshowSettings:properties -version to determine java platform" -->
			<exec executable="${@{java.bindir.property}}/java" output="${properties_file}">
				<arg value="-XshowSettings:properties"/>
				<arg value="-version"/>
			</exec>
			<loadproperties srcFile="${properties_file}" prefix="@{java.id}." prefixValues="false">
				<filterchain>
					<replacestring from="\" to="\\" />
				</filterchain>
			</loadproperties>
			<!-- Uncomment to echo the -XshowSettings:properties output to the log. -->
			<!-- <echoproperties>
				<propertyset>
					<propertyref prefix="@{java.id}."/>
				</propertyset>
			</echoproperties> -->
			<delete file="${properties_file}" verbose="false"/>
			<get-platform-prefix property="@{osname.property}" osname="${@{java.id}.os.name}"/>
			<get-platform-arch property="@{arch.property}" arch="${@{java.id}.os.arch}"/>
			<get-platform-bits property="@{bits.property}" bits="${@{java.id}.sun.arch.data.model}"/>
			<property name="@{platform.property}" value="${@{osname.property}}_${@{arch.property}}-${@{bits.property}}"/>
			<property name="@{platformclass.property}" value="${@{osname.property}}_${@{arch.property}}"/>
			<property name="@{java.specification.version.property}" value="${@{java.id}.java.specification.version}"/>
			<property name="@{java.vm.vendor.property}" value="${@{java.id}.java.vm.vendor}"/>
		</sequential>
	</macrodef>

	<macrodef name="get-platform-prefix" description="Sets a property containing a normalised platform string from the java os.name property">
		<attribute name="property" description="The property to set"/>
		<attribute name="osname"/>
		<sequential>
			<condition property="@{property}" value="win">
				<and>
					<contains string="@{osname}" substring="Windows"/>
				</and>
			</condition>
			<condition property="@{property}" value="aix">
				<and>
					<contains string="@{osname}" substring="AIX"/>
				</and>
			</condition>
			<condition property="@{property}" value="linux">
				<and>
					<contains string="@{osname}" substring="Linux"/>
				</and>
			</condition>
			<condition property="@{property}" value="osx">
				<and>
					<contains string="@{osname}" substring="Mac"/>
				</and>
			</condition>
			<condition property="@{property}" value="zos">
				<and>
					<contains string="@{osname}" substring="390"/>
				</and>
			</condition>
			<condition property="@{property}" value="zos">
				<and>
					<contains string="@{osname}" substring="z/OS"/>
				</and>
			</condition>
			<condition property="@{property}" value="sol">
				<and>
					<contains string="@{osname}" substring="Solaris"/>
				</and>
			</condition>
			<condition property="@{property}" value="bsd">
				<and>
					<contains string="@{osname}" substring="BSD"/>
				</and>
			</condition>
			<fail unless="@{property}" message="java os.name property value @{osname} not recognised.  Update the get-platform-prefix macrodef in stf.build/include/top.xml"/>
		</sequential>
	</macrodef>

	<macrodef name="get-platform-arch" description="Sets a property containing a normalised architecture string from the java os.arch property">
		<attribute name="property" description="The property to set"/>
		<attribute name="arch"/>
		<sequential>
			<condition property="@{property}" value="x86">
				<and>
					<contains string="@{arch}" substring="x86"/>
				</and>
			</condition>
			<condition property="@{property}" value="x86">
				<and>
					<contains string="@{arch}" substring="amd"/>
				</and>
			</condition>
			<condition property="@{property}" value="ppcle">
				<and>
					<contains string="@{arch}" substring="ppc64le"/>
				</and>
			</condition>
			<condition property="@{property}" value="ppc">
				<and>
					<contains string="@{arch}" substring="ppc"/>
				</and>
			</condition>
			<condition property="@{property}" value="390">
				<and>
					<contains string="@{arch}" substring="390"/>
				</and>
			</condition>
			<condition property="@{property}" value="sparc">
				<and>
					<contains string="@{arch}" substring="sparc"/>
				</and>
			</condition>
			<condition property="@{property}" value="arm">
				<and>
					<contains string="@{arch}" substring="aarch64"/>
				</and>
			</condition>
			<condition property="@{property}" value="arm">
				<and>
					<contains string="@{arch}" substring="arm"/>
				</and>
			</condition>
			<condition property="@{property}" value="ia">
				<and>
					<contains string="@{arch}" substring="IA64"/>
				</and>
			</condition>
			<fail unless="@{property}" message="java os.arch property value @{arch} not recognised.  Update the get-platform-arch macrodef in stf.build/include/top.xml"/>
		</sequential>
	</macrodef>
	<macrodef name="get-platform-bits" description="Sets a property containing the java platform bits (31/32 or 64)">
		<attribute name="property" description="The property to set"/>
		<attribute name="bits"/>
		<sequential>
			<property name="@{property}" value="@{bits}"/>
		</sequential>
	</macrodef>

</project>
